-
  util.expected = `
    A B C D
    A. B. C. D.
    Test A, test B, test C and 4 test D
    A, B, C and D
    begin A. B. C.
    A and D
    A, C and D
    A. B.
    <p>A.</p><p>B.</p>
    EMPTY
    test A X var and A Y var and test B X var and B Y var
    C B A
    A B
  `;


- var elts = ['A','B','C','D'];

mixin showElt(elt)
  | #{elt}

mixin mixinAnd(params)
  | and
  if params && params.nonEmpty
    | #{params.nonEmpty.length}

mixin showEltNOT_B_flag(elt, params)
  if elt!='B' || !hasFlag(params, 'NOT_B')
    | #{elt}

t
  l #[+foreach(elts, 'showElt')]
  l #[+foreach(elts, 'showElt', {mode:'sentences', separator: '.'}, {some:'params'})]
  l
    eachz elt in elts with { separator: ',', last_separator: 'mixinAnd' }
      | test #{elt}
  l
    eachz elt in elts with { separator: ', ', last_separator: 'and' }
      | #{elt}  
  l
    eachz elt in ['A','B','C'] with { mode:'sentences', separator:'.', begin_with_general:'begin'}
      | #{elt}
  l 
    eachz elt in elts with { separator: ', ', last_separator: ' and ' }
      if ['B','C'].indexOf(elt)==-1
        | #{elt}
  l
    eachz elt in elts with { mode:'single_sentence', separator: ', ', last_separator: ' and ' }
      | #[+showEltNOT_B_flag(elt, {NOT_B:true})]
  l
    eachz elt in ['A','B'] with {mode:'sentences', separator:'.'}
      | #{elt}
  l
    eachz elt in ['A','B'] with {mode:'paragraphs', separator:'.'}
      | #{elt}
  l
    eachz elt in [] with {mode:'single_sentence', if_empty:'EMPTY'}
      | #{elt}
  l
    eachz val in ['A','B'] with { separator: ',', last_separator: 'and' }
      | test
      - var myVar = "var";
      eachz val2 in ['X','Y'] with { separator: ',', last_separator: 'and' }
        | #{val} #{val2} #{myVar}

  l
    eachz val in ['A', 'B', 'C'] with { mix:true }
      | #{val}

  l
    eachz val in ['A', 'B']
      | #{val}
