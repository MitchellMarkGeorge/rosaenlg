
-
  util.expected = [
    '<t>',
      '<l>REFEXPR : cet anneau M / REF : la Bague Diamants F / AUTO : cette bague F / cet anneau M / cette bague F</l>',
      '<l>AUTO : la Bague Diamants F / ce bijou M / cette bague F</l>',
      '<l>la Bague Diamants est fournie / ce bijou est fourni / cette bague est fournie / cet anneau est fourni / ce bijou est fourni / cette bague est fournie</l>',


      '<l>la bague est belle / cet anneau est beau / cette bague est belle / cet anneau est beau</l>',
    '</t>'
  ].join('');


- var PRODUIT = {};

- PRODUIT.ref = 'produit_ref';
mixin produit_ref(obj, params)
  | la Bague Diamants
  - setRefGender(PRODUIT, 'F');

- PRODUIT.refexpr = 'produit_refexpr'
mixin produit_refexpr(obj, params)
  synz
    syn
      | cette bague
      - setRefGender(PRODUIT, 'F');
    syn
      | cet anneau
      - setRefGender(PRODUIT, 'M');
    syn
      | ce bijou
      - setRefGender(PRODUIT, 'M');

- var PRODUIT2 = {};
- PRODUIT2.ref = 'produit2_ref';
mixin produit2_ref(obj, params)
  | la bague
  - setRefGender(PRODUIT2, 'bague');
- PRODUIT2.refexpr = 'produit2_refexpr'
mixin produit2_refexpr(obj, params)
  synz
    syn
      | cette bague
      - setRefGender(PRODUIT2, 'bague');
    syn
      | cet anneau
      - setRefGender(PRODUIT2, 'anneau');


mixin valueDebugGender(obj, params)
  | #[+value(PRODUIT, params)] #{getRefGender(obj)}

t
  l REFEXPR : #[+valueDebugGender(PRODUIT, {REPRESENTANT: 'refexpr'})] / REF : #[+valueDebugGender(PRODUIT, {REPRESENTANT: 'ref'})] / AUTO : #[+valueDebugGender(PRODUIT)]  / #[+valueDebugGender(PRODUIT)] / #[+valueDebugGender(PRODUIT)]
  
  - resetRep(PRODUIT)
  l AUTO : #[+valueDebugGender(PRODUIT)]  / #[+valueDebugGender(PRODUIT)] / #[+valueDebugGender(PRODUIT)]
  
  - resetRep(PRODUIT)
  l #[+subjectVerbAdj(PRODUIT, 'être', 'fourni')] / #[+subjectVerbAdj(PRODUIT, 'être', 'fourni')] / #[+subjectVerbAdj(PRODUIT, 'être', 'fourni')] / #[+subjectVerbAdj(PRODUIT, 'être', 'fourni')] / #[+subjectVerbAdj(PRODUIT, 'être', 'fourni')] / #[+subjectVerbAdj(PRODUIT, 'être', 'fourni')]

  l
    eachz i in [0,1,2,3] with { separator: '/'}
      | #[+subjectVerbAdj(PRODUIT2, 'être', 'beau')]
