//-
  used by the NLG system itself.


//- save rollback etc.
-
  function copySavePointDataFromTo(obj1, obj2) {
    obj2.has_said = Object.assign({}, obj1.has_said);
    obj2.triggered_refs = new Map(obj1.triggered_refs);
    obj2.ref_gender = new Map(obj1.ref_gender);
    obj2.ref_number = new Map(obj1.ref_number);
    obj2.rndNextPos = obj1.rndNextPos;
    obj2.next_refs = new Map(obj1.next_refs);
    obj2.synoSeq = new Map(obj1.synoSeq);
  }

- 
  function save(params) {
    //-console.log('SAVING DATA');
    //-console.log('WHEN SAVING: ' + JSON.stringify(util));
    var savePoint = {
      htmlBefore: pug_html,
      context: params.context
    };
    copySavePointDataFromTo(util, savePoint);
    util.save_points.push(savePoint);

    if (savePoint.context=='isEmpty') {
      util.isEvaluatingEmpty = true;
    } else if (savePoint.context=='nextRep') {
      util.isEvaluatingNextRep = true; 
    }
  }

-
  function rollback() {
    //-console.log('ROLLBACK DATA');
    //-console.log('ROLLBACK DATA: size ' + util.save_points.length);
    var savePoint = util.save_points.pop();
    pug_html = savePoint.htmlBefore;
    //-console.log('SAVEPOINT CONTENT: ' + JSON.stringify(savePoint));
    copySavePointDataFromTo(savePoint, util);

    if (savePoint.context=='isEmpty') {
      util.isEvaluatingEmpty = false;
    } else if (savePoint.context=='nextRep') {
      util.isEvaluatingNextRep = false; 
    }
  }

-
  function deleteRollback() {
    util.save_points.pop();
  }


//- it's all about size
-
  function checkSize(which) {
    //console.log('aaaaa ' + getSize(which));
    if (getSize(which)==null) {
      console.log("ERROR could not find size of: " + which);
      throw err;
    }
  }

-
  function getSize(which) {
    return util.sizes[which];
  }

- 
  function setSize(which, size) {
    if (which==null) {
        console.log('ERROR: setSize called on null arg!');
        return;
     }
     util.sizes[which] = size;
  }


-
  function getSynoParams(which) {
    return util.synoParams[which]!=null ? util.synoParams[which] : null;    
  }

- 
  function getSynoMode(which) {
    //console.log("aaa" + util.defaultSynoMode);
    var synoParams = getSynoParams(which);
    return synoParams!=null && synoParams.mode!=null ? synoParams.mode : util.defaultSynoMode;
  }

- 
  function setSynoParams(which, params) {
    // console.log("setSynoParams called on: " + which + " with params: " + JSON.stringify(params));
    if (which==null) {
        console.log('ERROR: setSynoParams called on null which arg!');
        return;
    }
    if (params==null) {
        console.log('ERROR: setSynoParams called on null type arg!');
        return;
    }
    util.synoParams[which] = params;
    
  }

//- misc
-
  function isMixin(name) {
    return pug_mixins[name]!=null ? true : false;
  }

-
  function isString(x) {
    return Object.prototype.toString.call(x) === "[object String]"
  }
