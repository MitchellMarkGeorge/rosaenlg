-
  function setRefGender(obj, gender) {
    util.genderNumberManager.setRefGender(obj, gender);
  }

-
  function getRefGender(obj) {
    return util.genderNumberManager.getRefGender(obj);
  }

-
  function setRefNumber(obj, number) {
    util.genderNumberManager.setRefNumber(obj, number);
  }

-
  function getRefNumber(obj) {
    return util.genderNumberManager.getRefNumber(obj);
  }

-
  function setRefGenderNumber(obj, gender, number) {
    util.genderNumberManager.setRefGenderNumber(obj, gender, number);
  }

//--------------

-
  function resetRep(obj) {
    util.refsManager.resetRep(obj);
  }

-
  function hasTriggeredRef(obj) {
    return util.refsManager.hasTriggeredRef(obj);
  }

-
  function setTriggeredRef(obj) {
    util.refsManager.setTriggeredRef(obj);
  }









-
  function isEmptyObj(obj) {
    if (obj==null) return true;
    return Object.keys(obj).length === 0 && obj.constructor === Object;
  }

-
  function dumpRefMap() {
    console.log('ref_gender: ' + dumpMap(util.ref_gender));
    // console.log('ref_number: ' + dumpMap(util.ref_number));
  }

-
  function dumpMap(map) {
    return map.size;
  }










-
  function getNextRep(obj, params) {
    //console.log('GET NEXT REF');

    // there's already one planned
    if (util.refsManager.getNextRef(obj)!=null) {
      //console.log('already one planned');
      return util.refsManager.getNextRef(obj);
    }

    if (obj==null) {
      console.log('ERROR: getNextRep called on null object!');
    }

    // simulate
    var rndNextPosBefore = util.rndNextPos;
    util.saveSituation(pug_html, {context:'nextRep'});
    var hadRefBefore = hasTriggeredRef(obj);
    //console.log('hadRefBefore: ' + hadRefBefore);
    var lengthBefore = pug_html.length;
    
    pug_mixins['value'](obj, params);

    // record the result before rollback
    var nextRef = {
      'isNextRep': true, // is not used
      valueForDebug: pug_html.substring(lengthBefore),
      // we don't care about what will be triggered, but only if it has been triggered before
      REPRESENTANT: hadRefBefore ? 'ana' : 'ref',
      gender: getRefGender(obj),
      number: getRefNumber(obj),
      rndNextPos: rndNextPosBefore
    }
    //console.log("getNextRep will be:" + JSON.stringify(nextRef));

    // rollback
    // pug_html = html_before;
    pug_html = util.rollback();

    // register the result
    setRefGenderNumber(nextRef, nextRef.gender, nextRef.number);

    // save the nextRef for use when it will actually be triggered
    util.refsManager.setNextRef(obj, nextRef);


    return nextRef;
  }



mixin valueNumber(val, params)
  | #{util.valueManager.valueNumber(val, params, {isEvaluatingEmpty: util.isEvaluatingEmpty})}

mixin value_string(obj, params)
  if util.isEvaluatingEmpty==true
    | SOME_STRING
  else
    | #{obj}


mixin value(obj, params)
  if typeof(obj) === 'number'
    | #[+valueNumber(obj, params)]
  else if typeof(obj) === 'string'
    | #[+value_string(obj, params)]
  else if typeof(obj) === 'object'
    | #[+value_object(obj, params)]
  else
    - console.log('ERROR: value not possible on: ' + JSON.stringify(obj));


mixin value_object(obj, params)
  //- printObj('value', obj)
  
  //- we already have the next one
  if util.refsManager.getNextRef(obj)!=null
    -
      //console.log('we already have the next one');
      util.rndNextPos = util.refsManager.getNextRef(obj).rndNextPos;
      util.refsManager.deleteNextRef(obj);    
  if getFlagValue(params, 'REPRESENTANT')=='ref'
    +value_ref(obj, params)
  else if getFlagValue(params, 'REPRESENTANT')=='ana'
    +value_ana(obj, params)
  else
    if !hasTriggeredRef(obj)
      +value_ref(obj, params)
      - setTriggeredRef(obj);
    else if obj.ana
      +value_ana(obj, params)
    else
      //- we trigger ref if obj has no ana
      +value_ref(obj, params)

mixin value_ref(obj, params)
  //- printObj('value_ref', obj)
  if obj.ref
    //- printObj('value_ref_ok: ' + obj.ref, obj)
    +#{obj.ref}(obj, params)
  else
    - console.log('ERROR: ' + JSON.stringify(obj) + ' has no ref mixin');
    | #{obj.toString()}


mixin value_ana(obj, params)
  //- console.log('ana: ' + JSON.stringify(params));
  if obj.ana
    +#{obj.ana}(obj, params)
  else
    - console.log('ERROR: ' + obj + ' has no ana mixin');
    | #{obj.toString()}

