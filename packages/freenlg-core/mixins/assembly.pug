
include assembly/common.pug
include assembly/single_sentence.pug
include assembly/sentences.pug


mixin foreach(elts, mixinFct, asm, params)
  -
    util.asmManager.checkAsm(asm);
    var targetMixin = mixinFct!=null ? mixinFct : "value";
    // console.log('aaaa' + targetMixin);

    // start
    util.saveSituation(pug_html, {context:'isEmpty'});

    var nonEmptyElts = [];


    // we have to shuffle BEFORE testing
    var eltsToTest = [];
    for (var i=0; i<elts.length; i++) {
      eltsToTest.push(i);
    }
    if (asm!=null && asm.shuffle==true) {
      util.asmManager.shuffle(eltsToTest);
    }

    for (var i=0; i<eltsToTest.length; i++) {
      var elt = elts[i];
      if (!mixinIsEmpty(targetMixin, elt, params)) {
        nonEmptyElts.push(elt);
      }
    }

    pug_html = util.rollback();

  | #[+listStuff(targetMixin, nonEmptyElts, asm, params)]


mixin assemble(which, asm, size, params)
  -
    util.asmManager.checkAsm(asm);
    //console.log("START ASSEMBLE");
    
    var nonEmpty = [];

    // we have to shuffle BEFORE testing
    var eltsToTest = [];
    for (var i=1; i<=size; i++) {
      eltsToTest.push(i);
    }
    //console.log("before shuffle: " + eltsToTest);
    if (asm!=null && asm.shuffle==true) {
      util.asmManager.shuffle(eltsToTest);
    }
    //console.log("after shuffle: " + eltsToTest);

    // start
    util.saveSituation(pug_html, {context:'isEmpty'});
    

    for (var i=0; i<size; i++) {
      if (!mixinIsEmpty(which, eltsToTest[i], params)) {
        nonEmpty.push(eltsToTest[i]);
      }
    }
    //console.log("nonEmpty: " + nonEmpty);

    // rollback
    // pug_html = html_before;
    pug_html = util.rollback();

  | #[+listStuff(which, nonEmpty, asm, params)]


