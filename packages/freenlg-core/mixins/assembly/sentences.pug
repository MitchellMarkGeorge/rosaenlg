mixin insertSeparatorSentences(asm, index, size, params)
  //- at the end, after the last output
  if index+1==size
    if asm.separator
      //- we try to avoid </p>. in the output
      if !isDot(asm.separator)
        | #[+outputStringOrMixin(asm.separator, 'POS_END', params)]
      else
        +flushBuffer
        if !pug_html.endsWith('</p>')
          //-| #{'|'+getBufferLastChars(4)+'|'}
          //- console.log('XXXXXXXXXXX');
          | #[+outputStringOrMixin(asm.separator, 'POS_OTHER', params)]
  else if index+1==size-1
    if asm.last_separator
      | #[+outputStringOrMixin(asm.last_separator, 'POS_SEP', params)]
    else if asm.separator
      | #[+outputStringOrMixin(asm.separator, 'POS_SEP', params)]
  //- normal one
  else if index+1<size-1 && asm.separator
    | #[+outputStringOrMixin(asm.separator, 'POS_SEP', params)]



mixin listStuffSentences_helper(beginWith, params, elt, which, asm, index, size)
  if beginWith!=null
    | #[+outputStringOrMixin(beginWith, 'POS_BEGIN', params)]
  - pug_mixins[which](elt, params)
  +insertSeparatorSentences(asm, index, size, params)
  //- could set pTriggered to true but no read afterwards



-
  function getBeginWith(param, index) {
    if (param==null) {
      return null;
    } else if (typeof param === 'string' || param instanceof String) {
      //- if it is a string: we take it, but only once
      //- if it is a mixin: we take it each time
      if (index==0 || isMixin(param)) {
        return param;
      } else {
        return null;
      }
    } else if (param instanceof Array) {
      if (index < param.length) {
        return param[index];
      } else {
        return null;
      }
    }
    console.log('WARNING invalid getBeginWith: ' + param);
  }


mixin listStuffSentences(which, nonEmpty, asm, params)
  -   
    // console.log(nonEmpty);
    var size = nonEmpty.length;

    if (!params) params = {};
    // make it available in params
    params.nonEmpty = nonEmpty;


  if nonEmpty.length==0 && asm!=null && asm.if_empty!=null
    | #[+outputStringOrMixin(asm.if_empty, 'POS_OTHER', params)]

  each elt, index in nonEmpty

    //- begin
    -
      var beginWith = null;
      if (asm!=null) {
        if (index==0) {
          if (asm.begin_with_1!=null && nonEmpty.length==1) {
            beginWith = asm.begin_with_1;
          } else if (asm.begin_with_general!=null) {
            beginWith = getBeginWith(asm.begin_with_general, 0);
          }
        } else if (index==size-2) {
          if (asm.begin_last_1!=null) {
            beginWith = asm.begin_last_1;
          } else {
            beginWith = getBeginWith(asm.begin_with_general, index);
          }        
        } else if (index==size-1) {
          if (asm.begin_last!=null) {
            beginWith = asm.begin_last;
          } else {
            beginWith = getBeginWith(asm.begin_with_general, index);
          }
        } else {
          beginWith = getBeginWith(asm.begin_with_general, index);
        }
      }
    
    //- the actual content
    //- console.log(asm);

    if asm!=null && asm.mode=='paragraphs'
      p #[+listStuffSentences_helper(beginWith, params, elt, which, asm, index, size)]
    else
      | #[+listStuffSentences_helper(beginWith, params, elt, which, asm, index, size)]

    //-end
    if index==size-1
      if asm.end!=null && isDot(asm.end)
        - console.log('WARNING: when assembles is paragraph, the end is ignored when it is a dot.');
