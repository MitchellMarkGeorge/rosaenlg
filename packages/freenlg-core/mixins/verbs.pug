mixin subjectVerb(subject, verbInfo, params)
  | #[+value(subject, params)] #[+agreeVerb(subject, verbInfo)]

mixin subjectVerbAdj(subject, verbInfo, adjective, params)
  | #[+value(subject, params)] #[+agreeVerb(subject, verbInfo)] #[+agreeAdj(adjective, subject)]

mixin verb(subject, verbInfo)
  if util.isEvaluatingEmpty==true
    | SOME_VERB
  else
    | #[+agreeVerb(subject, verbInfo)]

//- test purposes only
mixin agreeVerb(subject, verbInfo)
  if util.isEvaluatingEmpty==true
    | SOME_VERB
  else
    -
      var verbName = isString(verbInfo) ? verbInfo : verbInfo.verb;
      if (verbName==null) { console.log("ERROR: verb needed."); }

      var tense = ( isString(verbInfo) || verbInfo.tense==null ) ? 'PRESENT' : verbInfo.tense;
      //console.log('verb=' + verbName + ' tense=' + tense + ' params: ' + JSON.stringify(verbInfo));

      var number = getRefNumber(subject);
      var person;
      if (number=='P') {
        person = 5;
      } else {
        person = 2;
      }
    | #{getConjugation(verbName, tense, person)}


-
  function getConjugation(verb, tense, person) {
    switch (util.language) {
      case 'en_US':
        return getConjugation_en_US(verb, tense, person)
        break;
      case 'fr_FR':
        return getConjugation_fr_FR(verb, tense, person)
        break;
    }
  }

-
  function getConjugation_en_US(verb, tense, person) {
    // console.log( util.compromise(verb).verbs().conjugate() );
    //console.log('TENSE: ' + tense);
    switch(tense) {
      case 'PRESENT':
        if (person!=2) return verb;
        return util.compromise(verb).verbs().toPresentTense().all().out();
      case 'PAST':
        return util.compromise(verb).verbs().toPastTense().all().out();
      case 'FUTURE':
        return util.compromise(verb).verbs().toFutureTense().all().out();
    }
    
  }

-
  function getConjugation_fr_FR(verb, tense, person) {
    //console.log(verb);
    
    try {
      // we try the exceptions list first
      return verbs_FR[verb][tense][person];
    } catch (e) {

      const tenseMapping = {
        'PRESENT': 'Indicative Present (présent)',
        'INDICATIF_PASSE_COMPOSE': 'Indicative Present perfect (passé composé)'
        // to be completed
      }

      var forms = util.frenchConjugator.getForms();
      // console.log(JSON.stringify(forms));
      var form = forms[ tenseMapping[tense] ];
      
      //console.log(JSON.stringify(form));

      var opts = Object.assign({}, form, 
        { number: person==2 ? "singular" : "plural" },
        { person: "third" }
      );

      //console.log(JSON.stringify(opts));

      return util.frenchConjugator.conjugate(verb, opts);
    }
  }

//- ['TODO', 'TODO', 'TODO', 'TODO', 'TODO', 'TODO']
-
  var verbs_FR = {
    'être': {
      INDICATIF_PASSE_COMPOSE: ['été', 'as été', 'a été', 'avons été', 'avez été', 'ont été']
    },
    'pouvoir': {
      PRESENT: ['TODO', 'TODO', 'peut', 'TODO', 'TODO', 'peuvent']
    },
    'faire': {
      PRESENT: ['TODO', 'TODO', 'fait', 'TODO', 'TODO', 'font']
    }
  };
