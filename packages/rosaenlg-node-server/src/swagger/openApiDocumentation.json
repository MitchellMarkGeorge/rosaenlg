{
  "openapi": "3.0.1",
  "info": {
    "title": "RosaeNLG API",
    "description": "API over the Natural Language Generation library RosaeNLG, written in node.js.",
    "contact": {
      "name": "Ludan Stoeckl√©",
      "email": "ludan.stoeckle@rosaenlg.org",
      "url": "https://rosaenlg.org"
    },
    "license": {
      "name": "MIT",
      "url": "http://www.opensource.org/licenses/mit-license.php"
    },
    "externalDocs": {
      "description": "RosaeNLG reference documentation",
      "url": "https://rosaenlg.org"
    }
  },
  "servers": [
    {
      "url": "http://localhost:5000/",
      "description": "Local server"
    }
  ],
  "components": {
    "schemas": {
      "JSONPackageSchema": {
        "$ref": "./src/swagger/jsonPackage.schema.json"
      },
      "RenderResponseAbstract": {
        "type": "object",
        "properties": {
          "renderedText": {
            "type": "string",
            "description": "the rendered text (this is the interesting part)"
          },
          "renderOptions": {
            "$ref": "./src/swagger/renderOptions.schema.json"
          },
          "ms": {
            "type": "integer",
            "description": "the time in ms that was necessary to process the request"
          }
        }
      }
    },
    "parameters": {
      "templateIdInPath": {
        "name": "templateId",
        "in": "path",
        "schema": {
          "type": "string"
        },
        "example": "chanson",
        "required": "true",
        "description": "ID of the template"
      },
      "userInHeader": {
        "name": "X-RapidAPI-User",
        "in": "header",
        "schema": {
          "type": "string"
        },
        "description": "ID of the user"
      }
    }
  },
  "paths": {
    "/health": {
      "get": {
        "summary": "Health check.",
        "responses": {
          "200": {
            "description": "Health is ok."
          },
          "503": {
            "description": "Bad health, typically cannot write to disk or S3 when persistent storage is set."
          }
        }
      }
    },
    "/templates": {
      "get": {
        "summary": "Get the IDs of the templates for user.",
        "description": "Contains both the loaded templates and the ones which are on the permanent storage",
        "parameters": [
          {
            "$ref": "#/components/parameters/userInHeader"
          }
        ],
        "responses": {
          "200": {
            "description": "the IDs of the templates",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "ids": {
                      "type": "array",
                      "description": "list of the IDs",
                      "items": {
                        "type": "string"
                      },
                      "uniqueItems": true
                    }
                  }
                },
                "example": {
                  "$ref": "./src/swagger/listExample.json"
                }
              }
            }
          }
        }
      },
      "put": {
        "summary": "Creates a new template.",
        "description": "Creates a template from a JSON containing a packaged template. The template is validated, loaded, autotested (if configured so), and saved on disk if persistent storage is set.",
        "parameters": [
          {
            "$ref": "#/components/parameters/userInHeader"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/JSONPackageSchema"
              },
              "example": {
                "$ref": "./src/swagger/chanson.json"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "template was properly loaded and is available for rendering",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "templateId": {
                      "type": "string",
                      "description": "ID of the created template"
                    },
                    "templateSha1": {
                      "type": "string",
                      "description": "sha1 of the created template, to be used in render requests"
                    },
                    "ms": {
                      "type": "number",
                      "description": "the time in ms that was needed to load the template"
                    }
                  }
                },
                "example": {
                  "$ref": "./src/swagger/chansonCreatedOrReloaded.json"
                }
              }
            }
          },
          "400": {
            "description": "invalid user name, or template could not be compiled, or invalid template format"
          },
          "500": {
            "description": "template should have been saved on disk or S3 but could not be saved"
          }
        }
      }
    },
    "/templates/{templateId}": {
      "delete": {
        "summary": "Deletes an existing template for a user.",
        "description": "Template will be unloaded, and deleted on the disk or S3 if permanent storage is set.",
        "parameters": [
          {
            "$ref": "#/components/parameters/templateIdInPath"
          },
          {
            "$ref": "#/components/parameters/userInHeader"
          }
        ],
        "responses": {
          "204": {
            "description": "template was deleted and unloaded"
          },
          "404": {
            "description": "template does not exist for that user"
          }
        }
      },
      "get": {
        "summary": "Gets information on a template: ID, sha1, and the original content.",
        "parameters": [
          {
            "$ref": "#/components/parameters/templateIdInPath"
          },
          {
            "$ref": "#/components/parameters/userInHeader"
          }
        ],
        "responses": {
          "200": {
            "description": "information on a template",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "templateId": {
                      "type": "string",
                      "description": "ID of the template"
                    },
                    "templateSha1": {
                      "type": "string",
                      "description": "sha1 of the template, to be used in render requests"
                    },
                    "templateContent": {
                        "$ref": "./src/swagger/jsonPackage.schema.json"
                    }
                  },
                  "required": ["templateId", "templateSha1", "templateContent"]
                },
                "example": {
                  "$ref": "./src/swagger/chansonGet.json"
                }
              }
            }
          },
          "400": {
            "description": "invalid user name"
          },
          "404": {
            "description": "template does not exist for that user"
          }
        }
      }
    },
    "/templates/{templateId}/{templateSha1}/render": {
      "post": {
        "summary": "Renders an existing template using data.",
        "description": "Renders an existing template using data passed in the request.",
        "parameters": [
          {
            "$ref": "#/components/parameters/templateIdInPath"
          },
          {
            "name": "templateSha1",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "example": "1bfdbcd203ec8e6f889b068fbb2d7d298b1db903",
            "required": "true",
            "description": "sha1 of the template (from create call)"
          },
          {
            "$ref": "#/components/parameters/userInHeader"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {},
              "example": {
                "$ref": "./src/swagger/chansonInput.json"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "rendering went well",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/RenderResponseAbstract"
                    }
                  ]
                },
                "example": {
                  "$ref": "./src/swagger/chansonOutput.json"
                }
              }
            }
          },
          "404": {
            "description": "template does not exist for that user"
          },
          "400": {
            "description": "invalid user name, or issue during rendering"
          }
        }
      }
    },
    "/templates/render": {
      "post": {
        "summary": "Renders a template in the request using data also in the request.",
        "description": "Both template and data are passed in the request. Template is automatically cached for a while to accelerate the next calls.",
        "parameters": [
          {
            "$ref": "#/components/parameters/userInHeader"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "template": {
                    "$ref": "#/components/schemas/JSONPackageSchema"
                  },
                  "data": {
                    "description": "data to render the template",
                    "type": "object"
                  }
                },
                "required": [
                  "template",
                  "data"
                ]
              },
              "example": {
                "$ref": "./src/swagger/chansonInput_directRender.json"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "rendering went well",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/RenderResponseAbstract"
                    }
                  ],
                  "properties": {
                    "status": {
                      "type": "string",
                      "description": "indicates if the template was created, or if it existed before and cached version could be used",
                      "enum": [
                        "CREATED",
                        "EXISTED"
                      ]
                    }
                  }
                },
                "example": {
                  "$ref": "./src/swagger/chansonOutput_directRender.json"
                }
              }
            }
          },
          "400": {
            "description": "invalid user, or missing template data, or missing data, or issue during template compilation, or issue during template rendering"
          }
        }
      }
    },
    "/templates/{templateId}/reload": {
      "put": {
        "summary": "Reloads a specific template from the disk or S3.",
        "description": "Only works if a permanent storage is set (disk or S3).",
        "parameters": [
          {
            "$ref": "#/components/parameters/templateIdInPath"
          },
          {
            "$ref": "#/components/parameters/userInHeader"
          }
        ],
        "responses": {
          "200": {
            "description": "the template was properly reloaded",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "templateId": {
                      "type": "string",
                      "description": "ID of the template"
                    },
                    "templateSha1": {
                      "type": "string",
                      "description": "sha1 of the template, to be used in render requests"
                    },
                    "ms": {
                      "type": "number",
                      "description": "the time in ms that was needed to load the template"
                    }
                  }
                },
                "example": {
                  "$ref": "./src/swagger/chansonCreatedOrReloaded.json"
                }
              }
            }
          },
          "404": {
            "description": "template does not exist for that user, or invalid template"
          },
          "400": {
            "description": "invalid user, or no templates path and no S3"
          }
        }
      }
    }
  }
}